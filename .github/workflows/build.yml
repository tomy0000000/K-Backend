name: Test, Build, Deploy

on:
  push:
    branches:
      - "main"
    paths:
      - "k_backend/**"
      - "pyproject.toml"
      - "poetry.lock"
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

  #     - name: Testing
  #       run: |
  #         flask test --coverage

  #     - name: Report coverage
  #       uses: codecov/codecov-action@v1

  style:
    name: Lint Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Linting
        run: |
          flake8 k_backend

  license:
    name: License Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_path == 'pyproject.toml' || github.event_path == 'poetry.lock' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # FOSSA's API Key are meant to be exposed as to doc
      - name: Scan License
        uses: fossas/fossa-action@main
        with:
          api-key: 2d7865a44aa575d857521faaee1a57f8

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [test, style]
    if: |
      always() && (github.event_name != 'pull_request') &&
      (needs.test.result == 'success') && (needs.style.result == 'success') &&
      (needs.license.result == 'success' || needs.license.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read Docker Image Identifiers
        run: echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Set up Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.IMAGE_REPOSITORY }}
            ghcr.io/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=edge

      - name: Build and Push Image
        uses: ./.github/actions/build-push-image
        with:
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # deployment:
  #   name: Deploy to Beta
  #   runs-on: ubuntu-latest
  #   environment: Beta
  #   needs: build
  #   if: ${{ always() && (github.event_name != 'pull_request') }}
  #   steps:
  #     - name: SSH and execute deployment
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         port: ${{ secrets.PORT }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.KEY }}
  #         script_stop: true
  #         script: |
  #           cd k-backend-beta
  #           docker pull tomy0000000/k-backend:edge
  #           docker-compose up --detach
  #           docker network connect nginx_default k-backend_app_beta
